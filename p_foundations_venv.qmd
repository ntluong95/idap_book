---
title: "Workspace Folders and Virtual Environments with `venv` and VS Code"
---

## Introduction

In this lesson, we will explore virtual environments in Python using Visual Studio Code (VS Code). We'll create a new workspace, set up a virtual environment, and install packages specific to our project.

## Learning Objectives

By the end of this lesson, you should be able to:

- Create a new workspace in VS Code
- Understand the concept of virtual environments
- Create and use a virtual environment in VS Code
- Install and use packages within a virtual environment

## Creating a New Workspace

1. **Open VS Code.**
2. Go to **File > Open Folder**.
3. Create a new folder named `graph_courses_python` and select it.

Next, let's try to import a package we haven't installed yet. Create a new Python file named `test_cowsay.py` and add the following line:

```{python}
#| eval: false
import cowsay
```

This will not work because we haven't installed the `cowsay` package yet. To install it properly, we'll need to use virtual environments.

## Understanding Virtual Environments

Virtual environments are isolated Python environments that allow you to manage packages for specific projects without affecting your system-wide Python installation.

### Environments & Interpreter

- **Environments** are for package management.
- The **interpreter** is the Python version you're using.

## Creating a Virtual Environment

1. Open the **Command Palette** (**View > Command Palette** or `Ctrl+Shift+P`).
2. Type `Python: Create Environment` and select it.
3. Choose **Venv** as the environment type.
4. Select the Python interpreter you want to use (e.g., Python 3.12.0).

You should now see a new folder called `.venv`. This is the virtual environment. Inside it is a folder called `lib`, which contains packages.

Next, tell VS Code to use this virtual environment:

1. Open the **Command Palette** again.
2. Type `Python: Select Interpreter` and choose it.
3. Select the interpreter associated with your virtual environment (it should be listed under `.venv`).

Now we've created and selected our virtual environment. We can install packages without affecting other projects.

## Installing Packages

Let's install the `cowsay` package.

1. Open a **new terminal** in VS Code.
2. Ensure the terminal is using your virtual environment.
3. Run the following command:

```{bash}
#| eval: false
pip install cowsay
```

Refresh your environment if necessary. You should now see the `cowsay` package in the list of installed packages.

Now we can use the package. Open `test_cowsay.py` and click the run button to execute the script.

You should see a cow saying hello!

## Summary of Key Steps

For each new Python project, follow these steps:

1. **F**older: Create a project folder.
2. **E**nvironment: Set up a virtual environment.
3. **I**nterpreter: Select the appropriate Python interpreter.
4. **L**ibraries: Install the necessary packages.

Remember the acronym **FEIL** to help you recall these steps.

## Demonstrating Environment Isolation

Let's demonstrate that the virtual environment is isolated.

1. Open your previous workspace `my_first_workspace` in a new VS Code window.
2. Create a Python file and try to use the `cowsay` package:

    ```{python}
    #| eval: false
    import cowsay
    ```

This will probably not work because `cowsay` is not installed in that environment. If it does work, it means you have `cowsay` installed globally, which is okay.

Now, let's return to our main folder/workspace. This is where you'll conduct most of your analysis for this course.

## Installing Course Packages

As a final step, let's install the packages we'll need for the course. While we could install each package as we encounter it, it's more efficient to install them all at once. In the terminal, run the following command:

```{bash}
#| eval: false
pip install plotly pandas jupyter ipykernel kaleido itables
```

- **pandas**: Data manipulation library.
- **plotly**: Visualization library.
- **jupyter** and **ipykernel**: Allow us to use Quarto to display our plots.
- **kaleido**: Library for saving plots in different formats.
- **itables**: Library for displaying tables in Quarto.

Keep this list of packages handy for future reference, as you'll likely need them for most projects.

This command will install all the required packages in one go. If your installation stops at some point, try rerunning the command. Sometimes network issues may cause the installation to fail. If it freezes for more than 10 minutes, close the terminal and rerun the command.

## Conclusion

You've now learned how to create a workspace, set up a virtual environment, install packages, and use them in your Python projects. Remember that each project should have its own virtual environment to keep dependencies isolated and manageable.