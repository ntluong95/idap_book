---
title: 'Conditional Transformations of Variables'
---

```{python}
# | echo: false
# temporary solution to avoid SSL certificate verification error
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
```


```{python}
# | echo: false
# Setup
import pandas as pd
pd.options.display.max_rows = 7
```

## Introduction

In the previous lesson, you learned the basics of data transformation in pandas.

In this lesson, we will explore how to **conditionally transform variables** in pandas using methods like `replace()`, dictionaries, and custom functions. Conditional transformations are essential when you need to recode variables or create new ones based on specific criteria.

Let's dive in!

## Learning Objectives

By the end of this lesson, you will:

- Be able to transform or create new variables based on conditions using `replace()` and dictionaries.
- Know how to handle `NaN` values in `replace()` transformations.
- Be able to define and apply custom functions to recode variables.

## Packages

This lesson will require `pandas`, `numpy`, `plotly.express`, and `vega_datasets`:

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```

## Introduction to `replace()`

One common task in data wrangling is to replace values in a column based on certain conditions. The `replace()` method in pandas is a versatile tool for this purpose.

### Example: Expanding Day Names

In the `tips` dataset, the `day` column contains abbreviated day names:

```{python}
tips = px.data.tips()
tips['day'].unique()
```

Our goal is to replace these abbreviations with the full day names.

We can create a mapping dictionary that maps the abbreviated names to the full names:

```{python}
day_mapping = {
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
}
```

Now, we use the `replace()` method with the mapping dictionary:

```{python}
tips['day_full'] = tips['day'].replace(day_mapping)
tips[['day', 'day_full']].head()
```

Alternatively, we can perform the replacement directly within the `replace()` method without explicitly defining a dictionary:

```{python}
tips['day_full'] = tips['day'].replace({
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
})
tips[['day', 'day_full']].head()
```


::: {.callout-tip title="Practice"}

### Practice Q: Abbreviate Gender

Using the `tips` dataset, replace the values in the `sex` column to abbreviate gender:

- Replace `"Female"` with `"F"`.
- Replace `"Male"` with `"M"`.

Assign the result to a new column called `sex_abbr` and display the first few rows.

```{python}
# Your code here:
```

:::

## Handling Missing Values with `replace()`

Sometimes, your dataset may contain missing values (`NaN` or `None`), and you may want to replace them with a placeholder or specific value.

### Example: Replacing Missing Values in the Movies Dataset

Let's examine the `Creative_Type` column in the `movies` dataset from vega_datasets:

```{python}
movies = vd.data.movies()
movies['Creative_Type'].value_counts(dropna=False)
```

You'll notice that there are missing values (represented as `None` in counts).
Suppose we decide to replace `None` and `"Multiple Creative Types"` with `"Unknown/Unclear"`.

We can do this using `replace()`:

```{python}
movies['Creative_Type'] = movies['Creative_Type'].replace({
    None: "Unknown/Unclear",
    "Multiple Creative Types": "Unknown/Unclear"
})
```

Now, let's verify the replacement:

```{python}
movies['Creative_Type'].value_counts(dropna=False)
```

::: {.callout-practice title="Practice"}

### Practice: Standardize MPAA Ratings

In the `movies` dataset, the `MPAA_Rating` column contains movie ratings. Some entries are `None` or `"Not Rated"`. Replace these values with `"Unrated"`.

Then, use `value_counts()` to see how many movies are unrated. There should be approximately 699 movies in this category.

```{python}
# Your code here:

```

:::

## Complex Conditions 

For more complex conditional transformations that cannot be handled with replace(), you can define custom functions and apply them to your DataFrame.

### Example: Flagging Movies Based on Gross

Suppose we want to flag movies as "US action movie" or "Global action movie" if they are superhero movies, based on their US and worldwide gross earnings.

- If the US gross and worldwide gross are the same (indicating sales were only in the US), the movie is flagged as a **US action movie**.
- If the worldwide gross is greater than the US gross, the movie is flagged as a **global action movie**.
- Otherwise, the movie is categorized as **Other**.

We can define a funcion that takes in three arguments and returns the appropriate flag:

```{python}
# Define the function to flag movies based on the conditions
def flag_movie(movie_type, us, worldwide):
    if movie_type == 'Super Hero' and us == worldwide:
        return 'US action movie'
    elif movie_type == 'Super Hero' and worldwide > us:
        return 'Global action movie'
    return 'Other'

```

Let's test it out with a few sets of values:

```{python}
flag_movie(movie_type='Super Hero', us=100, worldwide=100)
flag_movie(movie_type='Super Hero', us=100, worldwide=200)
flag_movie(movie_type='Comedy', us=100, worldwide=100)
```

Now that it works, recall that we need to vectorize this function to apply it to the entire column.

```{python}
flag_movie_vec = np.vectorize(flag_movie)
``` 

Now we can apply it to the entire column:

```{python}
movies['Action_Flag'] = flag_movie_vec(movies['Creative_Type'], movies['US_Gross'], movies['Worldwide_Gross'])
movies
```

To see the distribution of movie categories based on our flag, we can use `value_counts()`:

```{python}
movies['Action_Flag'].value_counts(dropna=False)
```

::: {.callout-practice title="Practice"}

### Practice: Flag Movies Based on Ratings

In the `movies` dataset, flag movies as **Critic-friendly** or **Commercial** based on their Rotten Tomatoes and IMDB ratings.

- If the Rotten Tomatoes rating is above 80% and the IMDB rating is below 5, the movie is flagged as **Critic-friendly**.
- If the Rotten Tomatoes rating is below 50% and the IMDB rating is above 8, the movie is flagged as **Commercial**.
- Otherwise, the movie is categorized as **Other**.

```{python}
# Your code here:
```

:::

## Wrap-Up

In this lesson, you learned how to conditionally transform variables in pandas using:

- The `replace()` method with dictionaries to map and replace specific values.
- Handling missing values (`NaN` or `None`) during replacements.
- Defining custom functions and applying them to handle complex conditions.

These techniques are powerful tools for data cleaning and preprocessing, allowing you to reshape your data to meet your analysis needs.

See you next time!

