---
title: 'Joining 2: One-to-Many, Multi-Key Joins & Key Mismatches'
---

```{python}
# | echo: false
# | message: false
# | warning: false
# Load packages
import pandas as pd
import numpy as np
from country_converter import CountryConverter
```

## Introduction

Now that we have a solid grasp on the different types of joins and how they work, we can look at how to manage more complex joins and messier data.


## Learning Objectives

-   You understand the concept of a one-to-many join

-   You know how to join on multiple key columns

-   You know how to check for mismatched values between dataframes


## Datasets 

Run the code below to load and define the datasets to be used in this lesson.

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)

cc = CountryConverter()


oil_2012 = oil_consumption[oil_consumption["year"] == 2012].copy()
oil_2012["country_code"] = cc.convert(oil_2012["country"], to="ISO3")

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India ", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

# Packages

Please load the packages needed for this lesson with the code below:

```{python}
# | warning: false
# | message: false
# | echo: true
import pandas as pd
import numpy as np
from country_converter import CountryConverter
cc = CountryConverter()
```

## One-to-many relationships

So far, we have primarily looked at one-to-one joins, where an observation in one dataframe corresponded to only one observation in the other dataframe. In a one-to-many join, an observation in one dataframe corresponds to multiple observations in the other dataframe.


To illustrate a one-to-many join, let's return to our patients and their COVID test data. Let's imagine that in our dataset, `Alice` and `Xavier` got tested multiple times for COVID. We can add two more rows to our `test_info` dataframe with their new test information:

```{python}
people
```

```{python}
test_info_many
```

Next, let's take a look at what happens when we use a `merge()` with `people` as the left dataframe:

```{python}
people.merge(test_info_many, on='name', how='left')
```

What's happened above? Basically, when you perform a one-to-many join, the data from the "one" side are duplicated for each matching row of the "many" side.

::: {.callout-tip title="Practice"}

### Practice Q: Merging One-to-Many Crop Yields

Run the code below to print the two small dataframes:

```{python}
farm_info
```

```{python}
crop_yields
```

If you use a `merge()` to join these datasets with a left join, how many rows will be in the final dataframe? Try to figure it out and then perform the join to see if you were right.

:::

## Multiple Key Columns

Sometimes we have more than one column that uniquely identifies the observations that we want to match on. For example, let's imagine we have traffic flow data for three streets at two different times of day: 9am and 2pm.

```{python}
traffic_flow
```

Now, let's imagine we have another dataset for the same three streets, recording air pollution levels (measured in particulate matter, **PM2.5**) during the same times of day. 
```{python}
pollution_levels
```

We want to join the two datasets so that each street has two rows: one for the 9am time point and one for the 2pm time point. To do this, our first instinct may be to join the datasets *only* on `street_name`. Let's try it out and see what happens:

```{python}
traffic_flow.merge(pollution_levels, on='street_name', how='left')
```

As we can see, this isn't what we wanted at all! We end up with duplicated rowsâ€”now we have **four rows** for each street.

What we want to do is match on BOTH `street_name` AND `time_of_day`. To do this, we need to tell Python to match on two columns by specifying both column names in a list.

```{python}
traffic_flow.merge(pollution_levels, on=['street_name', 'time_of_day'], how='left')
```

Now we have the correct number of rows! We can directly see the vehicle count and PM2.5 level for each street at each time of day.

::: {.callout-tip title="Practice"}

### Practice Q: Calculate Oil Consumption per Capita

We have two datasets containing information about countries:

- `oil_consumption`: Contains yearly oil consumption in tonnes
- `tidyr_population`: Contains yearly population data

```{python}
# View the datasets
oil_consumption
```

```{python}
tidyr_population.sort_values(by=['country', 'year'])
```

1. Join these datasets using a `merge()` with a left join. Since we want to match both country AND year, you'll need to join on multiple columns.

2. After joining, create a new column called `consumption_per_capita` that calculates the yearly oil consumption per person (in tonnes).

3. Which country had the highest per capita oil consumption in 2013?

```{python}
# | echo: false
# | eval: false
# Solution
oil_pop = oil_consumption.merge(tidyr_population, on=["country", "year"], how="left")

oil_pop["consumption_per_capita"] = (oil_pop["oil_consump"] * 1000) / oil_pop[
    "population"
]
oil_pop_2013 = oil_pop.query("year == 2013")
oil_pop_2013.sort_values(by="consumption_per_capita", ascending=False).head(1)
```

:::

## Key Mismatches

Often you will need to pre-clean your data when you draw it from different sources before you're able to join it. This is because there can be inconsistencies in ways that values are recorded.

To illustrate this, let's return to our mock patient data from the first lesson. If you recall, we had two dataframes, one called `people` and the other called `test_info`. We can recreate these datasets but change `Alice` to `alice` in the `test_info_diff` dataset and keep all other values the same.

```{python}
people
```

```{python}
test_info_diff
```

Now let's try a `merge()` on our two datasets.

```{python}
people.merge(test_info_diff, on='name', how='left')
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

As we can see, Python didn't recognize `Alice` and `alice` as the same person, and it also could not match `Charlie` and `Charlie `! So we lose `Alice` and `Charlie` in the `left` join, and they are dropped in the `inner` join.

How can we fix this? We need to ensure that the names in both datasets are in title case, with a capitalized first letter. For this we can use `str.title()`. Let's try it:

```{python}
test_info_title = test_info_diff.copy()
test_info_title['name'] = test_info_title['name'].str.title()
test_info_title
```

```{python}
people.merge(test_info_title, on='name', how='left')
```

```{python}
people.merge(test_info_title, on='name', how='inner')
```

Perfect! 

::: {.callout-tip title="Practice"}

## Practice Q: Inner Join countries

The following two datasets contain data for India, Indonesia, and the Philippines. However, an `inner` join of these datasets produces no output. What are the differences between the values in the key columns that would have to be changed before joining the datasets?

```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
asia_countries.merge(asia_population, on='Country')
```

Now, fix the mismatched values in the `Country` column and try the join again.

```{python}
# | echo: false
# | eval: false
# Solution
asia_countries["Country"] = asia_countries["Country"].str.title()
asia_countries.merge(asia_population, on="Country")
```

:::

## Key Mismatches: A Real Dataset Example

Let's now return to the oil consumption example.

```{python}
oil_consumption
tidyr_population
```

Recall that we had some issues with the `tidyr_population` dataset because the country names were not in the same format as in the `oil_consumption` dataset.

Let's see which countries failed to find a match in the `tidyr_population` dataset.

```{python}
oil_pop = oil_consumption.merge(tidyr_population, on=['country', 'year'], how='left')
missing_pop = oil_pop.query('population.isna()')
missing_pop['country'].unique()
```

It is hard to be sure whether this is because the population data is not available for these countries or because the country names are not spelled the same way in the two datasets.

To avoid such mismatches, it is often useful to use country codes rather than country names as the key.

Let's now add country codes to both datasets and try the join again.

```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```

```{python}
oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')
```

We can also check if there are any cases where there was no match found for the country code.

```{python}
missing_pop_code = oil_pop_code[oil_pop_code['population'].isna()]
missing_pop_code['country_code'].unique()
```

It seems 'TWN' (Taiwan) failed to find a match.

Let's make sure that Taiwan is in the `tidyr_population` dataset.

```{python}
tidyr_population[tidyr_population['country_code'] == 'TWN']
```

```{python}
tidyr_population[tidyr_population['country'].str.contains('Taiwan')]
```

Nope. We don't have it.

::: {.callout-tip title="Practice"}

### Practice Q: Merging Oil Consumption with Geographic Data

Run the code to view the two datasets.

The first, `oil_2012` records the oil consumption for the year 2012:

```{python}
oil_2012
```

And `country_regions` lists countries along with their respective regions and continents:

```{python}
country_regions
```

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US & China.

```{python}
# | echo: false
# | eval: false
# Solution

oil_2012_regions = oil_2012.merge(country_regions, on="country_code", how="left")
max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby("continent")["oil_consump"].idxmax()
]
max_oil_by_continent[["country", "continent", "oil_consump"]]
```

:::

# Wrap Up!

In this lesson, we delved into the intricacies of data cleaning before a join, focusing on how to detect and correct mismatches or inconsistencies in key columns. We also highlighted the impact of one-to-many relationships in joining dataframes, showing how data from the "one" side is duplicated for each matching row of the "many" side. Finally, we demonstrated how to join dataframes using multiple key columns.

As we conclude this lesson, we hope that you have gained a deeper understanding of the importance and utility of joining dataframes in Python.