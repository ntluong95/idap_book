[
  {
    "objectID": "p_foundations_for_loops.html",
    "href": "p_foundations_for_loops.html",
    "title": "5  Intro to Loops in Python",
    "section": "",
    "text": "5.1 Introduction\nAt the heart of programming is the concept of repeating a task multiple times. A for loop is one fundamental way to do that. Loops enable efficient repetition, saving time and effort.\nMastering this concept is essential for writing intelligent Python code.\nLet’s dive in and enhance your coding skills!/Applications/Python 3.12/Install Certificates.command",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  },
  {
    "objectID": "p_foundations_for_loops.html#learning-objectives",
    "href": "p_foundations_for_loops.html#learning-objectives",
    "title": "5  Intro to Loops in Python",
    "section": "5.2 Learning Objectives",
    "text": "5.2 Learning Objectives\nBy the end of this lesson, you will be able to:\n\nUse basic for loops in Python\nUse index variables to iterate through lists in a loop\nFormat output using f-strings within loops\nApply loops to generate multiple plots for data visualization",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  },
  {
    "objectID": "p_foundations_for_loops.html#packages",
    "href": "p_foundations_for_loops.html#packages",
    "title": "5  Intro to Loops in Python",
    "section": "5.3 Packages",
    "text": "5.3 Packages\nIn this lesson, we will use the following Python libraries:\n\nimport pandas as pd\nimport plotly.express as px\nfrom vega_datasets import data",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  },
  {
    "objectID": "p_foundations_for_loops.html#intro-to-for-loops",
    "href": "p_foundations_for_loops.html#intro-to-for-loops",
    "title": "5  Intro to Loops in Python",
    "section": "5.4 Intro to for Loops",
    "text": "5.4 Intro to for Loops\nLet’s start with a simple example. Suppose we have a list of children’s ages in years, and we want to convert these to months:\n\nages = [7, 8, 9]  # List of ages in years\n\nWe could try to directly multiply the list by 12:\n\nages * 12\n\n[7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9,\n 7,\n 8,\n 9]\n\n\nBut this does not do what we want. It repeats the list 12 times.\nRather, we need to loop through each element in the list and multiply it by 12:\n\nfor age in ages:\n    print(age * 12)\n\n84\n96\n108\n\n\nfor and in are required keywords in the loop. The colon and the indentation on the second line are also required.\nIn this loop, age is a temporary variable that takes the value of each element in ages during each iteration. First, age is 7, then 8, then 9.\nYou can choose any name for this variable:\n\nfor random_name in ages:\n    print(random_name * 12)\n\n84\n96\n108\n\n\nNote that we need the print statement since the loop does not automatically print the result:\n\nfor age in ages:\n    age * 12\n\n\n\n\n\n\n\nPractice\n\n\n\n5.4.1 Hours to Minutes Basic Loop\nTry converting hours to minutes using a for loop. Start with this list of hours:\n\nhours = [3, 4, 5]  # List of hours\n# Your code here",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  },
  {
    "objectID": "p_foundations_for_loops.html#printing-with-f-strings",
    "href": "p_foundations_for_loops.html#printing-with-f-strings",
    "title": "5  Intro to Loops in Python",
    "section": "5.5 Printing with f-strings",
    "text": "5.5 Printing with f-strings\nWe might want to print both the result and the original age. We could do this by concatenating strings with the + operator. But we need to convert the age to a string with str().\n\nfor age in ages:\n    print(str(age) + \" years is \" + str(age * 12) + \" months\" )\n\n7 years is 84 months\n8 years is 96 months\n9 years is 108 months\n\n\nAlternatively, we can use something called an f-string. This is a string that allows us to embed variables directly.\n\nfor age in ages:\n    print(f\"{age} years is {age * 12} months\")\n\n7 years is 84 months\n8 years is 96 months\n9 years is 108 months\n\n\nWithin the f-string, we use curly braces {} to embed the variables.\n\n\n\n\n\n\nPractice\n\n\n\n5.5.1 Practice: F-String\nAgain convert the list of hours below to minutes. Use f-strings to print both the original hours and the converted minutes.\n\nhours = [3, 4, 5]  # List of hours\n# Your code here\n# Example output \"3 hours is 180 minutes\"",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  },
  {
    "objectID": "p_foundations_for_loops.html#are-for-loops-useful-in-python",
    "href": "p_foundations_for_loops.html#are-for-loops-useful-in-python",
    "title": "5  Intro to Loops in Python",
    "section": "5.6 Are for Loops Useful in Python?",
    "text": "5.6 Are for Loops Useful in Python?\nWhile for loops are useful, in many cases there are more efficient ways to perform operations over collections of data.\nFor example, our initial age conversion could be achieved using pandas Series:\n\nimport pandas as pd\n\nages = pd.Series([7, 8, 9])\nmonths = ages * 12\nprint(months)\n\n0     84\n1     96\n2    108\ndtype: int64\n\n\nBut while libraries like pandas offer powerful ways to work with data, for loops are essential for tasks that can’t be easily vectorized or when you need fine-grained control over the iteration process.",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  },
  {
    "objectID": "p_foundations_for_loops.html#looping-with-an-index-and-value",
    "href": "p_foundations_for_loops.html#looping-with-an-index-and-value",
    "title": "5  Intro to Loops in Python",
    "section": "5.7 Looping with an Index and Value",
    "text": "5.7 Looping with an Index and Value\nSometimes, we want to access both the position (index) and the value of items in a list. The enumerate() function helps us do this easily.\nLet’s look at our ages list again:\n\nages = [7, 8, 9]  # List of ages in years\n\nFirst, let’s see what enumerate() actually does:\n\nfor item in enumerate(ages):\n    print(item)\n\n(0, 7)\n(1, 8)\n(2, 9)\n\n\nAs you can see, enumerate() gives us pairs of (index, value).\nWe can unpack these pairs directly in the for loop:\n\nfor i, age in enumerate(ages):\n    print(f\"The person at index {i} is aged {age}\")\n\nThe person at index 0 is aged 7\nThe person at index 1 is aged 8\nThe person at index 2 is aged 9\n\n\nHere, i is the index, and age is the value at that index.\nNow, let’s create a more detailed output using both the index and value:\n\nfor i, age in enumerate(ages):\n    print(f\"The person at index {i} is aged {age} years which is {age * 12} months\")\n\nThe person at index 0 is aged 7 years which is 84 months\nThe person at index 1 is aged 8 years which is 96 months\nThe person at index 2 is aged 9 years which is 108 months\n\n\nThis is particularly useful when you need both the position and the value in your loop.\n\n\n\n\n\n\nPractice\n\n\n\n5.7.1 Practice: Enumerate with F-strings\nUse enumerate() and f-strings to print a sentence for each hour in the list:\n\nhours = [3, 4, 5]  # List of hours\n\n# Your code here\n# Example output: \"Hour 3 at index 0 is equal to 180 minutes\"",
    "crumbs": [
      "Foundations",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Loops in Python</span>"
    ]
  }
]