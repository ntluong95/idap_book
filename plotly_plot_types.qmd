---
title: "Plotly Hadley Demo"
---


```{python}
# Load necessary libraries
import plotly.express as px
import pandas as pd
from palmerpenguins import load_penguins
```

```{python}
# Load the data
penguins = load_penguins()
```

```{python}
# Creating a Scatterplot
#   - We use `px.scatter()` to create a scatterplot representing individual data points.
scatter_plot = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g'
)
scatter_plot.show()
```

```{python}
# Incorporating Color by Species
#   - We add `color='species'` to differentiate penguin species by color.
scatter_plot_color = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g', 
    color='species'
)
scatter_plot_color.show()
```

```{python}
# Adding a Smooth Trendline
#   - We use `trendline='ols'` to add a linear trendline.
scatter_plot_trendline = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g', 
    color='species',
    trendline='ols'
)
scatter_plot_trendline.show()
```

```{python}
# Adding Shapes by Species
#   - We add `symbol='species'` to differentiate penguin species by shape in addition to colors.
scatter_plot_shape = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g', 
    color='species', 
    symbol='species',
    trendline='ols'
)
scatter_plot_shape.show()
```

```{python}
# Customizing Labels and Color Palette
#   - We use `update_layout()` to add a title, subtitle, and axis labels.
customized_plot = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g', 
    color='species', 
    symbol='species',
    trendline='ols'
)
customized_plot.update_layout(
    title="Body mass and flipper length",
    xaxis_title="Flipper length (mm)",
    yaxis_title="Body mass (g)",
    legend_title="Species"
)
customized_plot.show()
```

```{python}
# 1. Basic Plotly syntax
# • Plotly uses a function-based approach to create plots
# • The basic structure is: px.scatter(data, x, y, ...)
basic_plot = px.scatter(penguins, x='flipper_length_mm', y='body_mass_g')
basic_plot.show()
```

```{python}
# 2. Visualizing distributions
# Categorical variable
# • Use px.bar() for categorical variables
bar_plot = px.bar(penguins, x='species')
bar_plot.show()
```

```{python}
# Numerical variable
# • Use px.histogram() or px.density_contour() for numerical variables
histogram_plot = px.histogram(penguins, x='body_mass_g', nbins=30)
histogram_plot.show()
```

```{python}
density_plot = px.density_contour(penguins, x='body_mass_g')
density_plot.show()
```

```{python}
# 3. Visualizing relationships
# Numerical and categorical
# • Use px.box() or px.violin() with color aesthetic
box_plot = px.box(penguins, x='species', y='body_mass_g')
box_plot.show()
```

```{python}
density_color_plot = px.density_contour(penguins, x='body_mass_g', color='species')
density_color_plot.show()
```

```{python}
# Two categorical variables
# • Use stacked bar plots with fill aesthetic
stacked_bar_plot = px.histogram(penguins, x='island', color='species', barmode='relative')
stacked_bar_plot.show()
```

```{python}
# Two numerical variables
# • Use scatterplots (px.scatter())
scatter_plot_relationship = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g'
)
scatter_plot_relationship.show()
```

```{python}
# Multiple variables
# • Map additional variables to aesthetics like color, symbol
# • Use facet_col to create subplots
facet_plot = px.scatter(
    penguins, 
    x='flipper_length_mm', 
    y='body_mass_g', 
    color='species', 
    symbol='species',
    facet_col='island'
)
facet_plot.show()
```

```{python}
# 4. Saving plots
# • Use fig.write_image() to save the most recent plot
# Saving the plot as a PNG file
facet_plot.write_image("penguin_plot.png", width=800, height=600)
```

This structure breaks down each key section of the tutorial into its own chunk, following the Quarto syntax.

