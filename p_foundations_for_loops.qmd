---
title: 'Loops in Python'
---

## Introduction

At the heart of programming is the concept of repeating a task multiple times. A `for` loop is one fundamental way to do that. Loops enable efficient repetition, saving time and effort.

Mastering this concept is essential for writing intelligent and efficient Python code.

Let's dive in and enhance your coding skills!

## Learning Objectives

By the end of this lesson, you will be able to:

- Explain the syntax and structure of a basic `for` loop in Python
- Use index variables to iterate through multiple lists simultaneously in a loop
- Integrate `if/else` conditional statements within a loop
- Store loop results in lists
- Apply loops to tasks like analyzing multiple datasets and generating multiple plots

## Packages

In this lesson, we will use the following Python libraries:

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
```

## Intro to `for` Loops

Let's start with a simple example. Suppose we have a list of children's ages in years, and we want to convert these to months:

```{python}
ages = [7, 8, 9]  # List of ages in years
```

We could try to directly multiply the list by 12:

```{python}
# | eval: False
print(ages * 12)
```

But this does not work.

Rather, we need to loop through each element in the list and multiply it by 12:

```{python}
for age in ages:
    print(age * 12)
```

In this loop, `age` is a temporary variable that takes the value of each element in `ages` during each iteration. First, `age` is 7, then 8, then 9.

You can choose any name for this variable:

```{python}
for random_name in ages:
    print(random_name * 12)
```

::: {.callout-tip title='Practice'}

### Hours to Minutes Basic Loop

Try converting hours to minutes using a `for` loop. Start with this list of hours:

```{python}
hours = [3, 4, 5]  # List of hours
# Your code here
```

:::

## Are `for` Loops Useful in Python?

While `for` loops are useful, in many cases there are more efficient ways to perform operations over collections of data.

For example, our initial age conversion could be achieved using pandas Series:

```{python}
import pandas as pd

ages = pd.Series([7, 8, 9])
months = ages * 12
print(months)
```

However, there are scenarios where loops are useful, especially when working with multiple lists or non-tabular data structures.

## Looping with an Index

It is often useful to loop through a list using an index (plural: indices), which is a counter that keeps track of the current iteration.

Let's look at our `ages` list again, which we want to convert to months:

```{python}
ages = [7, 8, 9]  # List of ages in years
```

To use indices in a loop, we can use the `range()` function along with `len()`:

```{python}
indices = range(len(ages))
```

Now, `indices` is a range object with values 0, 1, 2, corresponding to the positions in `ages`. We use this in a `for` loop as follows:

```{python}
for i in indices:
    print(ages[i] * 12)
```

In this code, `ages[i]` refers to the `i`th element in our `ages` list.

The name of the variable `i` is arbitrary. We could have used `j` or `index` or `position` or anything else.

```{python}
for position in indices:
    print(ages[position] * 12)
```

Alternatively, we can use `range()` directly in the `for` loop:

```{python}
for i in range(len(ages)):
    print(ages[i] * 12)
```

Such index-based loops are useful for working with multiple lists at the same time. We will see this in the next section.

::: practice

### Hours to Minutes Indexed Loop

Rewrite your loop from last question using indices:

```{python}
hours = [3, 4, 5]  # List of hours

# Your code here
```

:::

# Real Loops Application: Generating Multiple Plots

Now that you have a solid understanding of `for` loops, let's apply our knowledge to a more realistic looping task: generating multiple plots.

We'll use the `tips` dataset from Plotly Express and the `gapminder` dataset from Vega datasets to demonstrate this. Our aim is to create scatter plots for each day of the week in the tips dataset, and line plots for a few selected countries in the gapminder dataset.

First, let's import the necessary libraries and load the data:

```{python}
import plotly.express as px
from vega_datasets import data

# Load tips dataset
tips = px.data.tips()
tips.head()

```

```{python}
# Load gapminder dataset
gapminder = data.gapminder()
gapminder.head()
```

Let's start with the gapminder dataset. We'll create a line plot showing life expectancy over time for a few selected countries:

```{python}
countries = ["United States", "China", "India", "Nigeria"]

for country in countries:
    country_data = gapminder.query("country == @country")
    fig = px.line(
        country_data,
        x="year",
        y="life_expect",
        title="Life Expectancy in " + country,
        labels={"life_expect": "Life Expectancy (years)"},
    )
    fig.show()
```

This loop creates a separate line plot for each country in our list, showing how life expectancy has changed over time.

::: {.callout-tip title='Practice'}

### Practice: Tips Scatter Plots by Day

Now it's your turn! Using the `tips` dataset, create a scatter plot of total bill vs. tip for each day of the week. Here's a template to get you started:

```{python}
# List of days
days = ['Thur', 'Fri', 'Sat', 'Sun']

# Your loop here
for day in days:
    # Filter data for the current day
    day_data = tips[tips['day'] == day]
    
    # Create and show the scatter plot
    fig = px.scatter(day_data, x='total_bill', y='tip', title=f'Tips on {day}')
    fig.show()
```

After running your code, answer these questions:

1. Which day seems to have the highest tips?
2. Is there any day where the relationship between total bill and tip looks different from the others?

:::

These examples demonstrate how loops can be used to efficiently generate multiple plots, saving time and reducing code repetition when working with datasets that have multiple categories or groups.


# Wrap Up!

In this lesson, we delved into `for` loops in Python, demonstrating their utility from basic tasks to complex data analysis involving multiple datasets and plot generation. For loops are an essential part of Python programming, and mastering them will greatly enhance your coding capabilities. Hopefully, this lesson has equipped you with the skills to confidently implement for loops in various data processing contexts.
