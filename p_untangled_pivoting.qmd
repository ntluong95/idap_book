---
title: 'Reshaping data'
---

```{python}
import pandas as pd

pd.options.display.max_rows = 10
```

## Intro

Pivoting or reshaping is a data manipulation technique that involves re-orienting the rows and columns of a dataset. This is often required to make data easier to analyze or understand.

In this lesson, we will cover how to effectively pivot data using `pandas` functions.

## Learning Objectives

- Understand what wide data format is, and what long data format is.
- Learn how to pivot long data to wide data using `melt()`.
- Learn how to pivot wide data to long data using `pivot()`.

## What do wide and long mean?

The terms wide and long are best understood in the context of example datasets. Let's take a look at some now.

Imagine that you have three products for which you collect sales data over three months.

You can record the data in a wide format like this:

| Product | Jan | Feb | Mar |
|---------|-----|-----|-----|
| A       | 100 | 120 | 110 |
| B       | 90  | 95  | 100 |
| C       | 80  | 85  | 90  |

---------------------------------------------------------------------

Or you could record the data in a long format as so:

| Product | Month | Sales |
|---------|-------|-------|
| A       | Jan   | 100   |
| A       | Feb   | 120   |
| A       | Mar   | 110   |
| B       | Jan   | 90    |
| B       | Feb   | 95    |
| B       | Mar   | 100   |
| C       | Jan   | 80    |
| C       | Feb   | 85    |
| C       | Mar   | 90    |

Take a minute to study the two datasets to make sure you understand the relationship between them.

In the wide dataset, each observational unit (each product) occupies only one row. And each measurement (sales in Jan, Feb, Mar) is in a separate column.

In the long dataset, on the other hand, each observational unit (each product) occupies multiple rows, with one row for each measurement.

------------------------------------------------------------------------

Here is another example with mock data, in which the observational units are countries:

Long format:

| Country | Year | GDP   |
|---------|------|-------|
| USA     | 2020 | 21433 |
| USA     | 2021 | 22940 |
| China   | 2020 | 14723 |
| China   | 2021 | 17734 |

Wide format:

| Country | GDP_2020 | GDP_2021 |
|---------|----------|----------|
| USA     | 21433    | 22940    |
| China   | 14723    | 17734    |

------------------------------------------------------------------------

The examples above are both time-series datasets, because the measurements are repeated across time. But the concepts of long and wide are relevant to other kinds of data too.

Consider the example below, showing the number of employees in different departments of three companies:

Wide format:

| Company | HR  | Sales | IT  |
|---------|-----|-------|-----|
| A       | 10  | 20    | 15  |
| B       | 8   | 25    | 20  |
| C       | 12  | 18    | 22  |

Long format:

| Company | Department | Employees |
|---------|------------|-----------|
| A       | HR         | 10        |
| A       | Sales      | 20        |
| A       | IT         | 15        |
| B       | HR         | 8         |
| B       | Sales      | 25        |
| B       | IT         | 20        |
| C       | HR         | 12        |
| C       | Sales      | 18        |
| C       | IT         | 22        |

In the wide dataset, again, each observational unit (each company) occupies only one row, with the repeated measurements for that unit (number of employees in different departments) spread across multiple columns.

In the long dataset, each observational unit is spread over multiple lines.

::: {.callout-note title="Vocab"}
The "observational units", sometimes called "statistical units" of a dataset are the primary entities or items described by the columns in that dataset.

In the first example, the observational/statistical units were products; in the second example, countries, and in the third example, companies.
:::

::: {.callout-tip title="Practice"}
Consider the mock dataset created below:

```{python}
import pandas as pd

temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "avgtemp.1994": [1, 2, 3],
        "avgtemp.1995": [3, 4, 5],
        "avgtemp.1996": [5, 6, 7],
    }
)
temperatures
```

Is this data in a wide or long format?

```{python}
# Write your answer here
```

:::

## When should you use wide vs long data?

The truth is: it really depends on what you want to do! The wide format is great for *displaying data* because it's easy to visually compare values this way. Long data is best for some data analysis tasks, like grouping and plotting.

It will therefore be essential for you to know how to switch from one format to the other easily. Switching from the wide to the long format, or the other way around, is called **pivoting**.

## Pivoting wide to long

To practice pivoting from a wide to a long format, we'll consider data from Our World in Data on fossil fuel consumption per capita. You can find the data [here](https://ourworldindata.org/grapher/fossil-fuels-per-capita).

Below, we read in and view this data on fossil fuel consumption per capita:

```{python}
fuels_wide = pd.read_csv("data/oil_per_capita_wide.csv")
fuels_wide
```

We observe that each observational unit (each country) occupies only one row, with the repeated measurements of fossil fuel consumption (in Kilowatt-hour equivalents) spread out across multiple columns. Hence this dataset is in a wide format.

To convert to a long format, we can use the convenient `melt` function. Within `melt` we define which columns we want to pivot:

```{python}
(fuels_wide
 .melt(id_vars=['Entity', 'Code'], 
       value_vars=fuels_wide.columns[2:])
)
```

Very easy!

Let's break down the code:

- `id_vars` refers to the column(s) that will not be pivoted. In this case, it's the country and the code.
- `value_vars` is the column(s) that will be pivoted. In this case, it's the years columns. 

The years are now indicated in the variable `variable`, and all the consumption values occupy a single variable, `value`.We may wish to rename the `variable` column to `year`, and the `value` column to `oil_consumption`. This can be done directly in the `melt` function:

```{python}
(fuels_wide
 .melt(id_vars=['Entity', 'Code'], 
       value_vars=fuels_wide.columns[2:],
       var_name='year', 
       value_name='oil_consumption')
)
```

You may also want to remove the `y_` in front of each year. This can be achieved with as string operation. We'll also arrange the data by country and year:

```{python}
(
    fuels_wide.melt(
        id_vars=["Entity", "Code"],
        value_vars=fuels_wide.columns[2:],
        var_name="year",
        value_name="oil_consumption",
    )
    .assign(year=lambda df: df["year"].str.replace("y_", "").astype(int))
    .sort_values(by=["Entity", "year"])
)
```

Here's what we added above: 

- In the `assign` function, we used a lambda function to replace the `y_` in front of each year with an empty string, and then convert the year to an integer.
- We used the `sort_values` function to sort the data by country and year.

Now we have a clean, long dataset; great! For later use, let's now store this data:

```{python}
fuels_long = (
    fuels_wide.melt(
        id_vars=["Entity", "Code"],
        value_vars=fuels_wide.columns[2:],
        var_name="year",
        value_name="oil_consumption",
    )
    .assign(year=lambda df: df["year"].str.replace("y_", "").astype(int))
    .sort_values(by=["Entity", "year"])
)
```

::: {.callout-tip title="Practice"}
For this practice question, you will use the `euro_births_wide` dataset from [Eurostat](https://ec.europa.eu/eurostat/databrowser/view/tps00204/default/table). It shows the annual number of births in 50 European countries:

```{python}
euro_births_wide = pd.read_csv("data/euro_births_wide.csv")
euro_births_wide
```

The data is in a wide format. Convert it to a long format data frame that has the following column names: "country", "year" and "births_count"

```{python}
# Your code here
```

:::

## Pivoting long to wide

Now you know how to pivot from wide to long with `melt`. How about going the other way, from long to wide? For this, you can use the `pivot` function.

But before we consider how to use this function to manipulate long data, let's first consider *where* you're likely to run into long data.

While wide data tends to come from external sources (as we have seen above), long data on the other hand, is likely to be created by *you* while data wrangling, especially in the course of grouped aggregations.

Let's see an example of this now.

We will use a dataset of contracts granted by the city of Chicago in the years 2020 to 2023. You can find more information about the data [here](https://data.cityofchicago.org/Administration-Finance/Contracts/rsxa-ify5/). Below we import the data and do some data processing to prepare it for analysis.

```{python}
contracts_raw = pd.read_csv("data/chicago_contracts_20_23.csv")

contracts = (
    contracts_raw
    .assign(year_of_contract=lambda df: pd.to_datetime(df["approval_date"]).dt.year)
    .reindex(columns=["year_of_contract"] + list(contracts_raw.columns.drop("approval_date")))
)

contracts
```

Each row corresponds to one contract, and we have each contract's id number, the year in which they were granted, the amount of the contract, and the vendor's name and address, among other variables.

Now, consider the following grouped summary of the `contracts` dataset, which shows the number of contracts by state of the vendor in each year:

```{python}
contracts_summary = (
    contracts.groupby(["state", "year_of_contract"]).size().reset_index(name="n")
)

contracts_summary
```

The output of this grouped operation is a quintessentially "long" dataset! Each observational unit (each contract type) occupies multiple rows (four rows per state, to be exact), with one row for each measurement (each year).

So, as you now see, long data often can arrive as an output of grouped summaries, among other data manipulations.

Now, let's see how to convert such long data into a wide format with `pivot`.

The code is quite straightforward:

```{python}
(
    contracts_summary.pivot(
        index="state", columns="year_of_contract", values="n"
    ).reset_index()
)
```

As you can see, `pivot` has three important arguments: `index`, `columns`, and `values`.

- `index` defines which column(s) to use as the new index. In our case, it's the state, since we want each row to represent one state.
- `columns` identifies which variable to use to define column names in the wide format. In our case, it's the year of the contract. You can see that the years are now the column names.
- `values` specifies which values will become the core of the wide data format. In our case, it's the number of contracts. data format.

You might also want to have the *years* be your primary observational/statistical unit, with each year occupying one row. This can be carried out similarly to the above example, but with `year_of_contract` as the index and `state` as the columns:

```{python}
(
    contracts_summary.pivot(
        index="year_of_contract", columns="state", values="n"
    ).reset_index()
)
```

Here the unique observation units (our rows) are now the years (2021, 2022, 2023).

::: {.callout-tip title="Practice"}

The `population` dataset shows the populations of 219 countries over time.

Pivot this data into a wide format. Your answer should have 20 columns and 219 rows.

```{python}
population = pd.read_csv("data/tidyr_population.csv")
population
```

```{python}
# Your code here
```
:::

## Pivoting can be hard

We have mostly looked at very simple examples of pivoting here, but in the wild, pivoting can be very difficult to do accurately. 

When you run into such cases, we recommend looking at the [official documentation](https://pandas.pydata.org/docs/user_guide/reshaping.html) of pivoting from the pandas team, as it is quite rich in examples. 

## Wrap up

Congratulations! You've mastered the art of reshaping data with pandas. 

You now understand the differences between wide and long formats, and can skillfully use melt() and pivot() to transform your data as needed. 

Remember, there's no universally "best" format – it depends on your specific analysis or visualization needs. With these skills, you're now equipped to handle data in any shape it comes in. Keep practicing with different datasets to reinforce your learning!


